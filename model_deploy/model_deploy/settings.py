"""
Django settings for model_deploy project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w4dst_&56ojx&+_guug=%2hv3fiuao^&!8&)9^$aa)p-4p%1@j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ["*"]
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'model_api',
    'corsheaders',
    'compressor',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True # If this is used then `CORS_ALLOWED_ORIGINS` will not have any effect
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    'https://afd5-182-2-134-84.ngrok-free.app'
] # If this is used, then not need to use `CORS_ALLOW_ALL_ORIGINS = True`
CORS_ALLOWED_ORIGIN_REGEXES = [
    'https://afd5-182-2-134-84.ngrok-free.app'
]

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ROOT_URLCONF = 'model_deploy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'model_deploy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

COMPRESS_ROOT = BASE_DIR / 'static'
 
COMPRESS_ENABLED = True
 
STATICFILES_FINDERS = ('compressor.finders.CompressorFinder',)

# from django.shortcuts import render
# from rest_framework.parsers import MultiPartParser, FormParser
# from rest_framework.response import Response
# from rest_framework.views import APIView
# from drf_yasg.utils import swagger_auto_schema
# from drf_yasg import openapi
# from model_api.services.prediction import Prediction
# import cv2
# from django.http import StreamingHttpResponse, JsonResponse
# from django.core.files.base import ContentFile
# import base64
# import json
# import threading
# from django.views.decorators.csrf import csrf_exempt
# import requests  # Add this import statement

# # Global variable to store the latest prediction result
# latest_prediction = None

# # Function to update the latest prediction result
# def update_prediction_result(prediction_result):
#     global latest_prediction
#     latest_prediction = prediction_result

# # Index
# def index(request):
#     return render(request, 'detection/index.html')

# # Testing with Camera
# def detect_faces_camera(request):
#     # Initialize OpenCV Cascade Classifier
#     face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

#     # Function to generate frames from camera
#     def gen_frames():
#         cap = cv2.VideoCapture(0)

#         while True:
#             ret, frame = cap.read()
#             if not ret:
#                 break

#             # Perform face detection
#             gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
#             faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

#             # Draw rectangles around detected faces
#             for (x, y, w, h) in faces:
#                 cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

#                 # Capture the face region and send it to the classification endpoint
#                 face_region = frame[y:y+h, x:x+w]
#                 _, jpeg = cv2.imencode('.jpg', face_region)
#                 face_bytes = jpeg.tobytes()
#                 face_b64 = base64.b64encode(face_bytes).decode('utf-8')

#                 threading.Thread(target=send_prediction_request, args=(face_b64, request.build_absolute_uri('/prediction/'))).start()

#             # Encode the frame in JPEG format
#             _, jpeg = cv2.imencode('.jpg', frame)
#             frame_bytes = jpeg.tobytes()

#             # Send the frame to the browser
#             yield (b'--frame\r\n'
#                    b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n\r\n')

#     return StreamingHttpResponse(gen_frames(), content_type='multipart/x-mixed-replace; boundary=frame')

# # Function to send prediction request to the prediction endpoint
# def send_prediction_request(face_b64, url):
#     response = requests.post(
#         url,
#         files={'media': ContentFile(base64.b64decode(face_b64), 'face.jpg')}
#     )

#     # Get prediction result
#     if response.status_code == 200:
#         result = response.json()
#         update_prediction_result(result['predictionResult'])
#     else:
#         update_prediction_result(None)

# # Endpoint to fetch the latest prediction result
# @csrf_exempt
# def fetch_latest_prediction(request):
#     global latest_prediction
#     return JsonResponse({'predictionResult': latest_prediction})

# class PredFacenetView(APIView):
#     parser_classes = (MultiPartParser, FormParser)

#     @swagger_auto_schema(
#         manual_parameters=[
#             openapi.Parameter(
#                 name='media',
#                 in_=openapi.IN_FORM,
#                 type=openapi.TYPE_FILE,
#                 description='Image file',
#                 required=True
#             )
#         ],
#         responses={
#             200: openapi.Response(
#                 'Success',
#                 openapi.Schema(
#                     type=openapi.TYPE_OBJECT,
#                     properties={
#                         'error': openapi.Schema(type=openapi.TYPE_STRING, description='Error status'),
#                         'message': openapi.Schema(type=openapi.TYPE_STRING, description='Message'),
#                         'predictionResult': openapi.Schema(
#                             type=openapi.TYPE_OBJECT,
#                             properties={
#                                 'UserID': openapi.Schema(type=openapi.TYPE_STRING, description='User ID'),
#                                 'timestamp': openapi.Schema(type=openapi.TYPE_STRING, description='Timestamp'),
#                                 'confidence': openapi.Schema(type=openapi.TYPE_NUMBER, format=openapi.FORMAT_FLOAT, description='Confidence level'),
#                                 'imageID': openapi.Schema(type=openapi.TYPE_INTEGER, description='Image ID'),
#                             },
#                         )
#                     }
#                 ),
#                 examples={
#                     'application/json': {
#                         "error": "false",
#                         "message": "success",
#                         "predictionResult": {
#                             "UserID": "vicky",
#                             "timestamp": "2024-07-03T14:05:49.439126",
#                             "confidence": 0.9121062518765518,
#                             "imageID": 13
#                         }
#                     }
#                 }
#             ),
#             400: 'Bad Request',
#         }
#     )
#     def post(self, request):
#         pred_obj = Prediction()
#         response_dict = pred_obj.predict(request)
#         response = response_dict['response']
#         status_value = response_dict['status']
#         return Response(response, status=status_value)
